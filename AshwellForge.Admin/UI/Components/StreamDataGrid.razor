@using AshwellForge.Admin.Models;
@using AshwellForge.Admin.Services;
@inject NavigationManager NavigationManager

<MudDataGrid T="StreamEntry" Items="@Entries" SortMode="SortMode.Single" Filterable="false" QuickFilter="@quickFilter"
             Dense="true" ColumnResizeMode="ResizeMode.Column" Loading="loading" LoadingProgressColor="Color.Primary"
             RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="@((e) => Refresh())" />
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="Stream Path" Resizable="true">
            <CellTemplate>
                <MudText Typo="Typo.body1">@context.Item.StreamPath</MudText>
                <MudText Typo="Typo.caption">Client id: @context.Item.ClientId</MudText>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.StartTime" />
        <PropertyColumn Property="x => x.Subscribers" SortBy="@sortBySubscribers" />
        <PropertyColumn Property="x => x.Resolution" Sortable="false" />
        <PropertyColumn Property="x => x.Framerate" Sortable="false" />
        <PropertyColumn Property="x => x.VideoCodec" Title="Video Codec" Sortable="false" />
        <PropertyColumn Property="x => x.AudioCodec" Title="Audio Codec" Sortable="false" />
        <PropertyColumn Property="x => x.SampleRate" Title="Sample Rate" Sortable="false" />
        <PropertyColumn Property="x => x.Channels" Sortable="false" />
        <TemplateColumn Resizable="false">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Open stream menu">
                    <MudMenuItem Label="Preview" OnClick="@((e) => OnOpenPreview.InvokeAsync(context.Item.StreamPath))" />
                    <MudMenuItem Class="py-0" AutoClose="false">
                        <ChildContent>
                            <div class="d-flex align-center">
                                <MudTextField Value="@RtmpPath(context.Item.StreamPath)" Label="RTMP Stream Path" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <CopyToClipboardButton Text="@RtmpPath(context.Item.StreamPath)" />
                            </div>
                        </ChildContent>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <!--<MudDataGridPager T="StreamEntry" />-->
        <MudPaper Class="py-4">
            @if (!Entries.Any())
            {
                <MudText Align="Align.Center">No stream available</MudText>
            }
        </MudPaper>
    </PagerContent>
</MudDataGrid>

@code {
    [Inject]
    StreamsApi api { get; set; } = default!;

    [Parameter]
    public EventCallback<string> OnOpenPreview { get; set; }

    IEnumerable<StreamEntry> Entries = new List<StreamEntry>();
    string searchString = string.Empty;
    List<string> events = new();
    bool loading = false;

    Func<StreamEntry, object> sortBySubscribers => x =>
    {
        return x.Subscribers;
    };

    // quick filter - filter globally across multiple columns with the same input
    Func<StreamEntry, bool> quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.StreamPath.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Resolution.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    string RtmpPath(string streamPath) => $"{NavigationManager.BaseUri}{streamPath.Substring(1)}.flv";

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        loading = true;
        Entries = await api.GetStreams();
        loading = false;
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<StreamEntry> args)
    {
        //_events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<StreamEntry> args)
    {
        //_events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<StreamEntry> items)
    {
        //_events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
