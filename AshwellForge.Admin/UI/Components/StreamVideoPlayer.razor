@using AshwellForge.Admin.Models
@using BlazorVideoPlayer
@inject IJSRuntime JSRuntime

<MudContainer class="rounded" Gutters="false">
    <Player id="@videoId"
            ProgressControl = "true"
            CurrentTimeControl="true"
            FullscreenControl="true"
            PIPControl="true"
            VolumeControl="true"
            MuteControl="true"
            SettingsControl="true"
            PlayControl="true"
            PlayLargeControl="true"
            Quality="true"
            Speed="true"
            Sources="@sources"
            OnEndedVideo="OnEndedVideo"
            OnPlayVideo="OnPlayVideo"
            OnVideoTimeUpdate="@((e) => OnVideoTimeUpdate(e.currentTime,e.duration))" />
</MudContainer>

@code {
    [Parameter]
    public VideoSource? Source { get; set; }

    List<Source> sources = new();
    readonly string videoId = $"video-player-{Guid.NewGuid():N}";

    protected override void OnInitialized()
    {
        if (Source is not null)
        {
            //sources.Add(Source.ToBVPSource());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrWhiteSpace(Source?.Path))
        {
            await JSRuntime.InvokeVoidAsync("mpegtsInterop.initialize", videoId, Source.Path);
        }
    }

    void OnEndedVideo()
    {
        Console.WriteLine("End of play");
    }

    async Task OnPlayVideo()
    {
        await JSRuntime.InvokeVoidAsync("mpegtsInterop.play", videoId);
    }

    void OnVideoTimeUpdate(float currentTime, float duration)
    {
        //Console.WriteLine("Current Time: " + currentTime);
        //Console.WriteLine("Duration: " + duration);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("mpegtsInterop.destroy", videoId);
    }
}
